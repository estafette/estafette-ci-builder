package builder

import (
	"encoding/json"
	"testing"

	contracts "github.com/estafette/estafette-ci-contracts"
	manifest "github.com/estafette/estafette-ci-manifest"
	"github.com/stretchr/testify/assert"
)

var (
	obfuscator = NewObfuscator(secretHelper)
)

func TestObfuscate(t *testing.T) {

	t.Run("ObfuscatesSecretInManifest", func(t *testing.T) {

		manifest := manifest.EstafetteManifest{
			GlobalEnvVars: map[string]string{
				"MY_SECRET": "estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)",
			},
		}
		credentials := []*contracts.CredentialConfig{}
		pipeline := "github.com/estafette/estafette-ci-builder"
		credentialsBytes, _ := json.Marshal(credentials)

		obfuscator.CollectSecrets(manifest, credentialsBytes, pipeline)

		// act
		output := obfuscator.Obfuscate("this is my secret")

		assert.Equal(t, "***", output)
	})

	t.Run("ObfuscatesSecretInCredentials", func(t *testing.T) {

		manifest := manifest.EstafetteManifest{}
		credentials := []*contracts.CredentialConfig{
			&contracts.CredentialConfig{
				AdditionalProperties: map[string]interface{}{
					"password": "estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)",
				},
			},
		}
		pipeline := "github.com/estafette/estafette-ci-builder"
		credentialsBytes, _ := json.Marshal(credentials)

		obfuscator.CollectSecrets(manifest, credentialsBytes, pipeline)

		// act
		output := obfuscator.Obfuscate("this is my secret")

		assert.Equal(t, "***", output)
	})

	t.Run("ObfuscatesBase64EncodedSecretInManifest", func(t *testing.T) {

		pipeline := "github.com/estafette/estafette-ci-builder"
		encryptedTextInEnvelope, err := secretHelper.EncryptEnvelope("ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAibXktcHJvamVjdC1pZCIsCiAgInByaXZhdGVfa2V5X2lkIjogInNmOHJlOTc4NDNoZXdyaHVpZnNkaWRmIiwKICAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCmIzQmxibk56YUMxclpYa3RkakVBQUFBQUJHNXZibVVBQUFBRWJtOXVaUUFBQUFBQUFBQUJBQUFCbHdBQUFBZHpjMmd0Y24KTmhBQUFBQXdFQUFRQUFBWUVBcnQwVUpqWTlYYkZRaTlYQ3FUcEdoNXR1NUR3UkpWNHZHNDdHdHBRajRzSURsV09mTm54QgpoNENkRGpWSk5kRGwrY0lyWjI0SjRDK0R0WldSUXJsVW5TcDh3QlN2Mk41RHQ4V3Jic2Qzc2c2cnJ0MFU1WU43VmU1K2plCnhBaFBDUzFVSFRBV3o4K05JdmZwMFdrb1pTa3ZubjJJYzdHcVBrT1FJWEdxSjRGY0t0cEp6aXNzQmR3QTBZVlowQm1qT2sKbmlidUlsbS9YWW0xNFRnWm92UTZRM1JzcXNRUUhHUDNDWWhWNHNyc0cvbTVOR29HTEU0K2FKSzBML2NJMzZUeExuUkJ5OQpSWms5WjAxYWYxVGFrL2w2eEdubE9rc0M5LzNrY3VSZndwZlRCaTVVQjB0NVFXYlFySXFHbnZOVDlTOFZHR2ZHa3crRmpMCnpGSXFaZjArYlBFSUtVMTZmMUErQ2lZR2wxOXhWYmxVWEp5dTJWT2pWQ0JnZ25HZjk4NWJFT1RvRVhBMWJhcC9mQU9oc1QKTm1va1RsZzkzbVN6d09lZWNFZzdoUWpIQVFDYURhRUVmRWJEby9QM05YU3QrYS9Tbk1WcVQreFpsc2xscmJnNThlUmpNUQo2a1hYNHIycjh4bHg3WkthZ1RWdXBKZWxsYnVjVUhzc3l5OXlIaFVGQUFBRm1DVWxnZEFsSllIUUFBQUFCM056YUMxeWMyCkVBQUFHQkFLN2RGQ1kyUFYyeFVJdlZ3cWs2Um9lYmJ1UThFU1ZlTHh1T3hyYVVJK0xDQTVWam56WjhRWWVBblE0MVNUWFEKNWZuQ0syZHVDZUF2ZzdXVmtVSzVWSjBxZk1BVXI5amVRN2ZGcTI3SGQ3SU9xNjdkRk9XRGUxWHVmbzNzUUlUd2t0VkIwdwpGcy9QalNMMzZkRnBLR1VwTDU1OWlIT3hxajVEa0NGeHFpZUJYQ3JhU2M0ckxBWGNBTkdGV2RBWm96cEo0bTdpSlp2MTJKCnRlRTRHYUwwT2tOMGJLckVFQnhqOXdtSVZlTEs3QnY1dVRScUJpeE9QbWlTdEMvM0NOK2s4UzUwUWN2VVdaUFdkTlduOVUKMnBQNWVzUnA1VHBMQXZmOTVITGtYOEtYMHdZdVZBZExlVUZtMEt5S2hwN3pVL1V2RlJobnhwTVBoWXk4eFNLbVg5UG16eApDQ2xOZW45UVBnb21CcGRmY1ZXNVZGeWNydGxUbzFRZ1lJSnhuL2ZPV3hEazZCRndOVzJxZjN3RG9iRXpacUpFNVlQZDVrCnM4RG5ubkJJTzRVSXh3RUFtZzJoQkh4R3c2UHo5elYwcmZtdjBwekZhay9zV1piSlphMjRPZkhrWXpFT3BGMStLOXEvTVoKY2UyU21vRTFicVNYcFpXN25GQjdMTXN2Y2g0VkJRQUFBQU1CQUFFQUFBR0JBSlVBUlQ4YVVNZ1pZMjBFUk04Mm5RcklZNApHUHZYeDkrTjRlbHl6VXBvOStpdGN0QUduSkQzMkxGa2taRnIwSXVDNU9TZlhrU2Y0Qi90VW9FWk10b1BBYldCbkVodUxnCjRnc2lJS1pReWFtcjNwY3VRN1FlaVdYN3gxTGYwVXAyUkdmN292VkFEWDlvZXBnRSswcjNzajBUUFgvQUc1amp0b0R0U3cKcWpEbmhjWHVJNTNPSThFS2FwZ2ViUjFwK3pDYjdKcFhrWHlIekg3M2R0K2twa21aRUpEOStqR2FkWGR4VmtXdXJaeHI4LwoxNVRXRTFTRmg2Qk1BY1l0Vmg1YnlNOGFiZ1dra0RUalhwVk8xdHEwZVd6eFFFNjJaTkRxKy9YTmQrTjMxcTJIM3p6UVJDCnN1dWdISWsvR0FIYnUrUzNGTXBocDBnSTNaN2hvTVJUc1VLTkJLTnRIbWk3OEVMTWVaMVc0VnpxS0l0azBUdmdzYWlrR3MKR01wUC9iN2dJZzFXWTJoZmFpMUpmUFZpWUNGcGdWTndyZGwvYXpCaHpCaERrN21hTzFpZXpCR0lTdURZWFAybGd0Zm1uRwpoK0FENElxWVc5bmhIQzRiQnJkOEZWVEtleU9QRTgwRUlnSi9xdHVpSjBNdkhjeVBncERjRmlJOXp6L1BNZkpsM3JBUUFBCkFNRUFnM21SOE9EMENpcEtvays0MzFwZzZwUmZXRmxRYVhaRi9QQ2c1OFpob2xMWENGc1VuN3c0a2FEWi9XbHBud0hKVUoKejBENzVHVVJMMWRPaEFaaHN0VXZTVXFkNlJNRjBLYllrU096bkZNQ0Z2ZGtrVllVQTZBWHVhVXNwK1ErSFN2dlVQZkVqeApVdVh2bHlNYVYrQ0t1cStNMkFTNmZzbyt1emFuYlpDaEl6d2dDUjdXUWZEbklNUGJjcGc1N1FySjIvbGw1blJDWUp4R0t4CkhUMVFrRXRBSy9ZN1NRcHVDVFNiTGVENGcyaVU4U3QxcU4yUWpsUGpVUUxZZ0p4N2s2QUFBQXdRRFZSeGpLZ2IrTXI2YXkKdlhpay81R0ZVMFZpODZLalg1Z1lZQXBKL3Q3bjVORmVZTm5QSjI4c2UzQU1jMEowRGswSDhvNExhbDRTY1FBbEY2WHIyUQoxcVU1TDhOdnAwVDBwVC9PSURkdGtZT3E5WU1jTytkRWV3c3JSMmFidm8rbnNzN3I2ZnV0dnhhbnNzakw3d3gvVldmVjRDCm0xTHZYL0d1b0hMaWRXdGZjK3lmdnhzbk1oY0pUUzViRlFmcUVtQ0ZDZmluWkV1SmxxUXlkMkw1NDZSQWY3OVl6aWdIQjkKM1RkVW9qNEhad0k4WTdMLzlmSmlqbTUvV0RXUkJLb25FQUFBREJBTkhrR2VubERKYnVyY0FoRG5kSTd6Yy9VOXVTUEJJaApkcUdrL2ZNVU9JaVRlMXJCNVI2VCt2VVM1NXUrUmp2NWZCTm1BN2o5OTI2NUpaMFloajJNMjczM2NNR2xkdkRXWktyUkRGClkrMUU5YmxMQjJZZ1k5clJ1WTAxbWNONGcreXN2aUludGI1QmNJVVZTQ2srTFVrcnp0Tkp6Vk1ZaHVtbHJmWTBUajBJaWsKQnVGS0ZJbkJVZEpVTlUxdWUxRTBVSUtKRlFhaHFuMlk0K3E3WjNaNVR2SFBhRjBFS0lUcms4eXlNcHNTc2krTHhKZFBtZApmUjJMV0NKMnhoMkZBOTFRQUFBQjFxYjNKeWFYUkFTbTl5Y21sMGN5MXBUV0ZqTG1aeWFYUjZMbUp2ZUFFQ0F3UT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQoiLAogICJjbGllbnRfZW1haWwiOiAibXktc2FAbXktcHJvamVjdC1pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgImNsaWVudF9pZCI6ICIzNDU5ODU0Mzk4NTQ5ODM0NSIsCiAgImF1dGhfdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoIiwKICAidG9rZW5fdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi90b2tlbiIsCiAgImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvY2VydHMiLAogICJjbGllbnRfeDUwOV9jZXJ0X3VybCI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9yb2JvdC92MS9tZXRhZGF0YS94NTA5L215LXNhJTQwbXktcHJvamVjdC1pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIKfQ==", pipeline)
		assert.Nil(t, err)

		manifest := manifest.EstafetteManifest{
			GlobalEnvVars: map[string]string{
				"MY_SA": encryptedTextInEnvelope,
			},
		}
		credentials := []*contracts.CredentialConfig{}
		credentialsBytes, _ := json.Marshal(credentials)

		obfuscator.CollectSecrets(manifest, credentialsBytes, pipeline)

		// act
		output := obfuscator.Obfuscate("fR2LWCJ2xh2FA91QAAAB1qb3JyaXRASm9ycml0cy1pTWFjLmZyaXR6LmJveAECAwQ=")

		assert.Equal(t, "***", output)
	})

}

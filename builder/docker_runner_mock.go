// Code generated by MockGen. DO NOT EDIT.
// Source: dockerRunner.go

// Package builder is a generated GoMock package.
package builder

import (
	context "context"
	reflect "reflect"

	client "github.com/docker/docker/client"
	contracts "github.com/estafette/estafette-ci-contracts"
	manifest "github.com/estafette/estafette-ci-manifest"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerRunner is a mock of DockerRunner interface.
type MockDockerRunner struct {
	ctrl     *gomock.Controller
	recorder *MockDockerRunnerMockRecorder
}

// MockDockerRunnerMockRecorder is the mock recorder for MockDockerRunner.
type MockDockerRunnerMockRecorder struct {
	mock *MockDockerRunner
}

// NewMockDockerRunner creates a new mock instance.
func NewMockDockerRunner(ctrl *gomock.Controller) *MockDockerRunner {
	mock := &MockDockerRunner{ctrl: ctrl}
	mock.recorder = &MockDockerRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerRunner) EXPECT() *MockDockerRunnerMockRecorder {
	return m.recorder
}

// CreateDockerClient mocks base method.
func (m *MockDockerRunner) CreateDockerClient() (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerClient")
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerClient indicates an expected call of CreateDockerClient.
func (mr *MockDockerRunnerMockRecorder) CreateDockerClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerClient", reflect.TypeOf((*MockDockerRunner)(nil).CreateDockerClient))
}

// CreateNetworks mocks base method.
func (m *MockDockerRunner) CreateNetworks(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworks", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworks indicates an expected call of CreateNetworks.
func (mr *MockDockerRunnerMockRecorder) CreateNetworks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworks", reflect.TypeOf((*MockDockerRunner)(nil).CreateNetworks), ctx)
}

// DeleteNetworks mocks base method.
func (m *MockDockerRunner) DeleteNetworks(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworks", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworks indicates an expected call of DeleteNetworks.
func (mr *MockDockerRunnerMockRecorder) DeleteNetworks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworks", reflect.TypeOf((*MockDockerRunner)(nil).DeleteNetworks), ctx)
}

// GetImageSize mocks base method.
func (m *MockDockerRunner) GetImageSize(containerImage string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSize", containerImage)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSize indicates an expected call of GetImageSize.
func (mr *MockDockerRunnerMockRecorder) GetImageSize(containerImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSize", reflect.TypeOf((*MockDockerRunner)(nil).GetImageSize), containerImage)
}

// HasInjectedCredentials mocks base method.
func (m *MockDockerRunner) HasInjectedCredentials(stageName, containerImage string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasInjectedCredentials", stageName, containerImage)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasInjectedCredentials indicates an expected call of HasInjectedCredentials.
func (mr *MockDockerRunnerMockRecorder) HasInjectedCredentials(stageName, containerImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasInjectedCredentials", reflect.TypeOf((*MockDockerRunner)(nil).HasInjectedCredentials), stageName, containerImage)
}

// IsImagePulled mocks base method.
func (m *MockDockerRunner) IsImagePulled(ctx context.Context, stageName, containerImage string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImagePulled", ctx, stageName, containerImage)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsImagePulled indicates an expected call of IsImagePulled.
func (mr *MockDockerRunnerMockRecorder) IsImagePulled(ctx, stageName, containerImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImagePulled", reflect.TypeOf((*MockDockerRunner)(nil).IsImagePulled), ctx, stageName, containerImage)
}

// IsTrustedImage mocks base method.
func (m *MockDockerRunner) IsTrustedImage(stageName, containerImage string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrustedImage", stageName, containerImage)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTrustedImage indicates an expected call of IsTrustedImage.
func (mr *MockDockerRunnerMockRecorder) IsTrustedImage(stageName, containerImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrustedImage", reflect.TypeOf((*MockDockerRunner)(nil).IsTrustedImage), stageName, containerImage)
}

// PullImage mocks base method.
func (m *MockDockerRunner) PullImage(ctx context.Context, stageName, containerImage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", ctx, stageName, containerImage)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage.
func (mr *MockDockerRunnerMockRecorder) PullImage(ctx, stageName, containerImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockDockerRunner)(nil).PullImage), ctx, stageName, containerImage)
}

// RunReadinessProbeContainer mocks base method.
func (m *MockDockerRunner) RunReadinessProbeContainer(ctx context.Context, parentStage manifest.EstafetteStage, service manifest.EstafetteService, readiness manifest.ReadinessProbe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunReadinessProbeContainer", ctx, parentStage, service, readiness)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadinessProbeContainer indicates an expected call of RunReadinessProbeContainer.
func (mr *MockDockerRunnerMockRecorder) RunReadinessProbeContainer(ctx, parentStage, service, readiness interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadinessProbeContainer", reflect.TypeOf((*MockDockerRunner)(nil).RunReadinessProbeContainer), ctx, parentStage, service, readiness)
}

// StartDockerDaemon mocks base method.
func (m *MockDockerRunner) StartDockerDaemon() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDockerDaemon")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDockerDaemon indicates an expected call of StartDockerDaemon.
func (mr *MockDockerRunnerMockRecorder) StartDockerDaemon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDockerDaemon", reflect.TypeOf((*MockDockerRunner)(nil).StartDockerDaemon))
}

// StartServiceContainer mocks base method.
func (m *MockDockerRunner) StartServiceContainer(ctx context.Context, envvars map[string]string, service manifest.EstafetteService) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServiceContainer", ctx, envvars, service)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartServiceContainer indicates an expected call of StartServiceContainer.
func (mr *MockDockerRunnerMockRecorder) StartServiceContainer(ctx, envvars, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServiceContainer", reflect.TypeOf((*MockDockerRunner)(nil).StartServiceContainer), ctx, envvars, service)
}

// StartStageContainer mocks base method.
func (m *MockDockerRunner) StartStageContainer(ctx context.Context, depth, runIndex int, dir string, envvars map[string]string, stage manifest.EstafetteStage) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStageContainer", ctx, depth, runIndex, dir, envvars, stage)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStageContainer indicates an expected call of StartStageContainer.
func (mr *MockDockerRunnerMockRecorder) StartStageContainer(ctx, depth, runIndex, dir, envvars, stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStageContainer", reflect.TypeOf((*MockDockerRunner)(nil).StartStageContainer), ctx, depth, runIndex, dir, envvars, stage)
}

// StopAllContainers mocks base method.
func (m *MockDockerRunner) StopAllContainers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopAllContainers")
}

// StopAllContainers indicates an expected call of StopAllContainers.
func (mr *MockDockerRunnerMockRecorder) StopAllContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAllContainers", reflect.TypeOf((*MockDockerRunner)(nil).StopAllContainers))
}

// StopMultiStageServiceContainers mocks base method.
func (m *MockDockerRunner) StopMultiStageServiceContainers(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopMultiStageServiceContainers", ctx)
}

// StopMultiStageServiceContainers indicates an expected call of StopMultiStageServiceContainers.
func (mr *MockDockerRunnerMockRecorder) StopMultiStageServiceContainers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopMultiStageServiceContainers", reflect.TypeOf((*MockDockerRunner)(nil).StopMultiStageServiceContainers), ctx)
}

// StopSingleStageServiceContainers mocks base method.
func (m *MockDockerRunner) StopSingleStageServiceContainers(ctx context.Context, parentStage manifest.EstafetteStage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSingleStageServiceContainers", ctx, parentStage)
}

// StopSingleStageServiceContainers indicates an expected call of StopSingleStageServiceContainers.
func (mr *MockDockerRunnerMockRecorder) StopSingleStageServiceContainers(ctx, parentStage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSingleStageServiceContainers", reflect.TypeOf((*MockDockerRunner)(nil).StopSingleStageServiceContainers), ctx, parentStage)
}

// TailContainerLogs mocks base method.
func (m *MockDockerRunner) TailContainerLogs(ctx context.Context, containerID, parentStageName, stageName string, stageType contracts.LogType, depth, runIndex int, multiStage *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TailContainerLogs", ctx, containerID, parentStageName, stageName, stageType, depth, runIndex, multiStage)
	ret0, _ := ret[0].(error)
	return ret0
}

// TailContainerLogs indicates an expected call of TailContainerLogs.
func (mr *MockDockerRunnerMockRecorder) TailContainerLogs(ctx, containerID, parentStageName, stageName, stageType, depth, runIndex, multiStage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TailContainerLogs", reflect.TypeOf((*MockDockerRunner)(nil).TailContainerLogs), ctx, containerID, parentStageName, stageName, stageType, depth, runIndex, multiStage)
}

// WaitForDockerDaemon mocks base method.
func (m *MockDockerRunner) WaitForDockerDaemon() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForDockerDaemon")
}

// WaitForDockerDaemon indicates an expected call of WaitForDockerDaemon.
func (mr *MockDockerRunnerMockRecorder) WaitForDockerDaemon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDockerDaemon", reflect.TypeOf((*MockDockerRunner)(nil).WaitForDockerDaemon))
}

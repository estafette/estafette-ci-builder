// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package estafetteciapi is a generated GoMock package.
package estafetteciapi

import (
	context "context"
	contracts "github.com/estafette/estafette-ci-contracts"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// HandleFatal mocks base method
func (m *MockClient) HandleFatal(arg0 context.Context, arg1 contracts.BuildLog, arg2 error, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleFatal", arg0, arg1, arg2, arg3)
}

// HandleFatal indicates an expected call of HandleFatal
func (mr *MockClientMockRecorder) HandleFatal(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFatal", reflect.TypeOf((*MockClient)(nil).HandleFatal), arg0, arg1, arg2, arg3)
}

// SendBuildStartedEvent mocks base method
func (m *MockClient) SendBuildStartedEvent(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBuildStartedEvent", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBuildStartedEvent indicates an expected call of SendBuildStartedEvent
func (mr *MockClientMockRecorder) SendBuildStartedEvent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBuildStartedEvent", reflect.TypeOf((*MockClient)(nil).SendBuildStartedEvent), ctx)
}

// SendBuildFinishedEvent mocks base method
func (m *MockClient) SendBuildFinishedEvent(ctx context.Context, buildStatus contracts.LogStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBuildFinishedEvent", ctx, buildStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBuildFinishedEvent indicates an expected call of SendBuildFinishedEvent
func (mr *MockClientMockRecorder) SendBuildFinishedEvent(ctx, buildStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBuildFinishedEvent", reflect.TypeOf((*MockClient)(nil).SendBuildFinishedEvent), ctx, buildStatus)
}

// SendBuildCleanEvent mocks base method
func (m *MockClient) SendBuildCleanEvent(ctx context.Context, buildStatus contracts.LogStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBuildCleanEvent", ctx, buildStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBuildCleanEvent indicates an expected call of SendBuildCleanEvent
func (mr *MockClientMockRecorder) SendBuildCleanEvent(ctx, buildStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBuildCleanEvent", reflect.TypeOf((*MockClient)(nil).SendBuildCleanEvent), ctx, buildStatus)
}

// SendBuildJobLogEvent mocks base method
func (m *MockClient) SendBuildJobLogEvent(ctx context.Context, buildLog contracts.BuildLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBuildJobLogEvent", ctx, buildLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBuildJobLogEvent indicates an expected call of SendBuildJobLogEvent
func (mr *MockClientMockRecorder) SendBuildJobLogEvent(ctx, buildLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBuildJobLogEvent", reflect.TypeOf((*MockClient)(nil).SendBuildJobLogEvent), ctx, buildLog)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package envvar is a generated GoMock package.
package envvar

import (
	contracts "github.com/estafette/estafette-ci-contracts"
	manifest "github.com/estafette/estafette-ci-manifest"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCommandOutput mocks base method
func (m *MockClient) GetCommandOutput(arg0 string, arg1 ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommandOutput", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandOutput indicates an expected call of GetCommandOutput
func (mr *MockClientMockRecorder) GetCommandOutput(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandOutput", reflect.TypeOf((*MockClient)(nil).GetCommandOutput), varargs...)
}

// SetEstafetteGlobalEnvvars mocks base method
func (m *MockClient) SetEstafetteGlobalEnvvars() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEstafetteGlobalEnvvars")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEstafetteGlobalEnvvars indicates an expected call of SetEstafetteGlobalEnvvars
func (mr *MockClientMockRecorder) SetEstafetteGlobalEnvvars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEstafetteGlobalEnvvars", reflect.TypeOf((*MockClient)(nil).SetEstafetteGlobalEnvvars))
}

// SetEstafetteBuilderConfigEnvvars mocks base method
func (m *MockClient) SetEstafetteBuilderConfigEnvvars(builderConfig contracts.BuilderConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEstafetteBuilderConfigEnvvars", builderConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEstafetteBuilderConfigEnvvars indicates an expected call of SetEstafetteBuilderConfigEnvvars
func (mr *MockClientMockRecorder) SetEstafetteBuilderConfigEnvvars(builderConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEstafetteBuilderConfigEnvvars", reflect.TypeOf((*MockClient)(nil).SetEstafetteBuilderConfigEnvvars), builderConfig)
}

// SetEstafetteEventEnvvars mocks base method
func (m *MockClient) SetEstafetteEventEnvvars(events []*manifest.EstafetteEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEstafetteEventEnvvars", events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEstafetteEventEnvvars indicates an expected call of SetEstafetteEventEnvvars
func (mr *MockClientMockRecorder) SetEstafetteEventEnvvars(events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEstafetteEventEnvvars", reflect.TypeOf((*MockClient)(nil).SetEstafetteEventEnvvars), events)
}

// InitGitSource mocks base method
func (m *MockClient) InitGitSource() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGitSource")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGitSource indicates an expected call of InitGitSource
func (mr *MockClientMockRecorder) InitGitSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGitSource", reflect.TypeOf((*MockClient)(nil).InitGitSource))
}

// InitGitOwner mocks base method
func (m *MockClient) InitGitOwner() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGitOwner")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGitOwner indicates an expected call of InitGitOwner
func (mr *MockClientMockRecorder) InitGitOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGitOwner", reflect.TypeOf((*MockClient)(nil).InitGitOwner))
}

// InitGitName mocks base method
func (m *MockClient) InitGitName() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGitName")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGitName indicates an expected call of InitGitName
func (mr *MockClientMockRecorder) InitGitName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGitName", reflect.TypeOf((*MockClient)(nil).InitGitName))
}

// InitGitFullName mocks base method
func (m *MockClient) InitGitFullName() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGitFullName")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGitFullName indicates an expected call of InitGitFullName
func (mr *MockClientMockRecorder) InitGitFullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGitFullName", reflect.TypeOf((*MockClient)(nil).InitGitFullName))
}

// InitGitRevision mocks base method
func (m *MockClient) InitGitRevision() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGitRevision")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGitRevision indicates an expected call of InitGitRevision
func (mr *MockClientMockRecorder) InitGitRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGitRevision", reflect.TypeOf((*MockClient)(nil).InitGitRevision))
}

// InitGitBranch mocks base method
func (m *MockClient) InitGitBranch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGitBranch")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGitBranch indicates an expected call of InitGitBranch
func (mr *MockClientMockRecorder) InitGitBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGitBranch", reflect.TypeOf((*MockClient)(nil).InitGitBranch))
}

// InitBuildDatetime mocks base method
func (m *MockClient) InitBuildDatetime() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitBuildDatetime")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitBuildDatetime indicates an expected call of InitBuildDatetime
func (mr *MockClientMockRecorder) InitBuildDatetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitBuildDatetime", reflect.TypeOf((*MockClient)(nil).InitBuildDatetime))
}

// InitBuildStatus mocks base method
func (m *MockClient) InitBuildStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitBuildStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitBuildStatus indicates an expected call of InitBuildStatus
func (mr *MockClientMockRecorder) InitBuildStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitBuildStatus", reflect.TypeOf((*MockClient)(nil).InitBuildStatus))
}

// InitLabels mocks base method
func (m *MockClient) InitLabels(arg0 manifest.EstafetteManifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitLabels", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitLabels indicates an expected call of InitLabels
func (mr *MockClientMockRecorder) InitLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLabels", reflect.TypeOf((*MockClient)(nil).InitLabels), arg0)
}

// CollectEstafetteEnvvars mocks base method
func (m *MockClient) CollectEstafetteEnvvars() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectEstafetteEnvvars")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// CollectEstafetteEnvvars indicates an expected call of CollectEstafetteEnvvars
func (mr *MockClientMockRecorder) CollectEstafetteEnvvars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectEstafetteEnvvars", reflect.TypeOf((*MockClient)(nil).CollectEstafetteEnvvars))
}

// CollectEstafetteEnvvarsAndLabels mocks base method
func (m *MockClient) CollectEstafetteEnvvarsAndLabels(arg0 manifest.EstafetteManifest) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectEstafetteEnvvarsAndLabels", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// CollectEstafetteEnvvarsAndLabels indicates an expected call of CollectEstafetteEnvvarsAndLabels
func (mr *MockClientMockRecorder) CollectEstafetteEnvvarsAndLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectEstafetteEnvvarsAndLabels", reflect.TypeOf((*MockClient)(nil).CollectEstafetteEnvvarsAndLabels), arg0)
}

// CollectGlobalEnvvars mocks base method
func (m *MockClient) CollectGlobalEnvvars(arg0 manifest.EstafetteManifest) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectGlobalEnvvars", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// CollectGlobalEnvvars indicates an expected call of CollectGlobalEnvvars
func (mr *MockClientMockRecorder) CollectGlobalEnvvars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectGlobalEnvvars", reflect.TypeOf((*MockClient)(nil).CollectGlobalEnvvars), arg0)
}

// UnsetEstafetteEnvvars mocks base method
func (m *MockClient) UnsetEstafetteEnvvars() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsetEstafetteEnvvars")
}

// UnsetEstafetteEnvvars indicates an expected call of UnsetEstafetteEnvvars
func (mr *MockClientMockRecorder) UnsetEstafetteEnvvars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetEstafetteEnvvars", reflect.TypeOf((*MockClient)(nil).UnsetEstafetteEnvvars))
}

// GetEstafetteEnv mocks base method
func (m *MockClient) GetEstafetteEnv(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstafetteEnv", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEstafetteEnv indicates an expected call of GetEstafetteEnv
func (mr *MockClientMockRecorder) GetEstafetteEnv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstafetteEnv", reflect.TypeOf((*MockClient)(nil).GetEstafetteEnv), arg0)
}

// SetEstafetteEnv mocks base method
func (m *MockClient) SetEstafetteEnv(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEstafetteEnv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEstafetteEnv indicates an expected call of SetEstafetteEnv
func (mr *MockClientMockRecorder) SetEstafetteEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEstafetteEnv", reflect.TypeOf((*MockClient)(nil).SetEstafetteEnv), arg0, arg1)
}

// UnsetEstafetteEnv mocks base method
func (m *MockClient) UnsetEstafetteEnv(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetEstafetteEnv", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetEstafetteEnv indicates an expected call of UnsetEstafetteEnv
func (mr *MockClientMockRecorder) UnsetEstafetteEnv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetEstafetteEnv", reflect.TypeOf((*MockClient)(nil).UnsetEstafetteEnv), arg0)
}

// GetEstafetteEnvvarName mocks base method
func (m *MockClient) GetEstafetteEnvvarName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstafetteEnvvarName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEstafetteEnvvarName indicates an expected call of GetEstafetteEnvvarName
func (mr *MockClientMockRecorder) GetEstafetteEnvvarName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstafetteEnvvarName", reflect.TypeOf((*MockClient)(nil).GetEstafetteEnvvarName), arg0)
}

// OverrideEnvvars mocks base method
func (m *MockClient) OverrideEnvvars(arg0 ...map[string]string) map[string]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverrideEnvvars", varargs...)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// OverrideEnvvars indicates an expected call of OverrideEnvvars
func (mr *MockClientMockRecorder) OverrideEnvvars(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverrideEnvvars", reflect.TypeOf((*MockClient)(nil).OverrideEnvvars), arg0...)
}

// DecryptSecret mocks base method
func (m *MockClient) DecryptSecret(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptSecret", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// DecryptSecret indicates an expected call of DecryptSecret
func (mr *MockClientMockRecorder) DecryptSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptSecret", reflect.TypeOf((*MockClient)(nil).DecryptSecret), arg0, arg1)
}

// DecryptSecrets mocks base method
func (m *MockClient) DecryptSecrets(arg0 map[string]string, arg1 string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptSecrets", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// DecryptSecrets indicates an expected call of DecryptSecrets
func (mr *MockClientMockRecorder) DecryptSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptSecrets", reflect.TypeOf((*MockClient)(nil).DecryptSecrets), arg0, arg1)
}

// GetCiServer mocks base method
func (m *MockClient) GetCiServer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCiServer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCiServer indicates an expected call of GetCiServer
func (mr *MockClientMockRecorder) GetCiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCiServer", reflect.TypeOf((*MockClient)(nil).GetCiServer))
}

// SetPipelineName mocks base method
func (m *MockClient) SetPipelineName(builderConfig contracts.BuilderConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPipelineName", builderConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPipelineName indicates an expected call of SetPipelineName
func (mr *MockClientMockRecorder) SetPipelineName(builderConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPipelineName", reflect.TypeOf((*MockClient)(nil).SetPipelineName), builderConfig)
}

// GetPipelineName mocks base method
func (m *MockClient) GetPipelineName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPipelineName indicates an expected call of GetPipelineName
func (mr *MockClientMockRecorder) GetPipelineName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineName", reflect.TypeOf((*MockClient)(nil).GetPipelineName))
}

// GetWorkDir mocks base method
func (m *MockClient) GetWorkDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkDir indicates an expected call of GetWorkDir
func (mr *MockClientMockRecorder) GetWorkDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkDir", reflect.TypeOf((*MockClient)(nil).GetWorkDir))
}

// GetTempDir mocks base method
func (m *MockClient) GetTempDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTempDir indicates an expected call of GetTempDir
func (mr *MockClientMockRecorder) GetTempDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempDir", reflect.TypeOf((*MockClient)(nil).GetTempDir))
}

// MakeDNSLabelSafe mocks base method
func (m *MockClient) MakeDNSLabelSafe(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDNSLabelSafe", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// MakeDNSLabelSafe indicates an expected call of MakeDNSLabelSafe
func (mr *MockClientMockRecorder) MakeDNSLabelSafe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDNSLabelSafe", reflect.TypeOf((*MockClient)(nil).MakeDNSLabelSafe), arg0)
}

// GetGitOrigin mocks base method
func (m *MockClient) GetGitOrigin() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitOrigin")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitOrigin indicates an expected call of GetGitOrigin
func (mr *MockClientMockRecorder) GetGitOrigin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitOrigin", reflect.TypeOf((*MockClient)(nil).GetGitOrigin))
}

// GetSourceFromOrigin mocks base method
func (m *MockClient) GetSourceFromOrigin(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceFromOrigin", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceFromOrigin indicates an expected call of GetSourceFromOrigin
func (mr *MockClientMockRecorder) GetSourceFromOrigin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceFromOrigin", reflect.TypeOf((*MockClient)(nil).GetSourceFromOrigin), arg0)
}

// GetOwnerFromOrigin mocks base method
func (m *MockClient) GetOwnerFromOrigin(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerFromOrigin", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOwnerFromOrigin indicates an expected call of GetOwnerFromOrigin
func (mr *MockClientMockRecorder) GetOwnerFromOrigin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerFromOrigin", reflect.TypeOf((*MockClient)(nil).GetOwnerFromOrigin), arg0)
}

// GetNameFromOrigin mocks base method
func (m *MockClient) GetNameFromOrigin(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameFromOrigin", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNameFromOrigin indicates an expected call of GetNameFromOrigin
func (mr *MockClientMockRecorder) GetNameFromOrigin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameFromOrigin", reflect.TypeOf((*MockClient)(nil).GetNameFromOrigin), arg0)
}

FROM mcr.microsoft.com/windows/servercore:ltsc2019 as builder

ARG ESTAFETTE_GIT_NAME="estafette-ci-builder"
ARG ESTAFETTE_BUILD_VERSION="0.0.0"
ARG ESTAFETTE_GIT_REVISION="abcdef"
ARG ESTAFETTE_GIT_BRANCH="main"
ARG ESTAFETTE_BUILD_DATETIME="2020-01-01T00:00:00Z"

ENV ESTAFETTE_GIT_NAME=$ESTAFETTE_GIT_NAME
ENV ESTAFETTE_BUILD_VERSION=$ESTAFETTE_BUILD_VERSION
ENV ESTAFETTE_GIT_REVISION=$ESTAFETTE_GIT_REVISION
ENV ESTAFETTE_GIT_BRANCH=$ESTAFETTE_GIT_BRANCH
ENV ESTAFETTE_BUILD_DATETIME=$ESTAFETTE_BUILD_DATETIME

# $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN netsh interface ipv4 show subinterfaces; \
  Get-NetAdapter | Where-Object Name -like "*Ethernet*" | ForEach-Object { \
    & netsh interface ipv4 set subinterface $_.InterfaceIndex mtu=1400 store=persistent; \
  }; \
  netsh interface ipv4 show subinterfaces;

# install MinGit (especially for "go get")
# https://blogs.msdn.microsoft.com/visualstudioalm/2016/09/03/whats-new-in-git-for-windows-2-10/
# "Essentially, it is a Git for Windows that was stripped down as much as possible without sacrificing the functionality in which 3rd-party software may be interested."
# "It currently requires only ~45MB on disk."
ENV GIT_VERSION 2.23.0
ENV GIT_TAG v${GIT_VERSION}.windows.1
ENV GIT_DOWNLOAD_URL https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip
ENV GIT_DOWNLOAD_SHA256 8f65208f92c0b4c3ae4c0cf02d4b5f6791d539cd1a07b2df62b7116467724735
# steps inspired by "chcolateyInstall.ps1" from "git.install" (https://chocolatey.org/packages/git.install)
RUN Write-Host ('Downloading {0} to git.zip ...' -f $env:GIT_DOWNLOAD_URL); \
	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
	Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip' -TimeoutSec 300; \
	\
	Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \
	if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \
		Write-Host 'FAILED!'; \
		exit 1; \
	}; \
	\
	Write-Host 'Expanding git.zip ...'; \
	Expand-Archive -Path git.zip -DestinationPath C:\git\.; \
	\
	Write-Host 'Removing git.zip ...'; \
	Remove-Item git.zip -Force; \
	\
	Write-Host 'Updating PATH ...'; \
	$env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH; \
	[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \
	\
	Write-Host 'Verifying install ("git version") ...'; \
	git version; \
	\
	Write-Host 'Completed installing git.';

# ideally, this would be C:\go to match Linux a bit closer, but C:\go is the recommended install path for Go itself on Windows
ENV GOPATH C:\\gopath

# PATH isn't actually set in the Docker image, so we have to set it from within the container
RUN $newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH); \
	Write-Host ('Updating PATH: {0}' -f $newPath); \
	[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
# doing this first to share cache across versions more aggressively

ENV GOLANG_VERSION 1.15.6

RUN $url = 'https://storage.googleapis.com/golang/go1.15.6.windows-amd64.zip'; \
	Write-Host ('Downloading {0} to go.zip ...' -f $url); \
	Invoke-WebRequest -Uri $url -OutFile 'go.zip' -TimeoutSec 300; \
	\
	$sha256 = 'b7b3808bb072c2bab73175009187fd5a7f20ffe0a31739937003a14c5c4d9006'; \
	Write-Host ('Verifying sha256 ({0}) ...' -f $sha256); \
	if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \
		Write-Host 'FAILED!'; \
		exit 1; \
	}; \
	\
	Write-Host 'Expanding go.zip ...'; \
	Expand-Archive go.zip -DestinationPath C:\; \
	\
	Write-Host 'Removing go.zip ...'; \
	Remove-Item go.zip -Force; \
	\
	Write-Host 'Verifying install ("go version") ...'; \
	go version; \
	\
	Write-Host 'Complete installing go.';

WORKDIR C:/Work

# perform actual build of the ci-builder
COPY . .
RUN go build -v -ldflags "-X main.app=$env:ESTAFETTE_GIT_NAME -X main.version=$env:ESTAFETTE_BUILD_VERSION -X main.revision=$env:ESTAFETTE_GIT_REVISION -X main.branch=$env:ESTAFETTE_GIT_BRANCH -X main.buildDate=$env:ESTAFETTE_BUILD_DATETIME" -o ./publish/estafette-ci-builder.exe

FROM mcr.microsoft.com/windows/servercore:ltsc2019

COPY --from=builder C:/gopath/publish/estafette-ci-builder.exe C:/estafette-ci-builder.exe
COPY builder/templates C:/entrypoint-templates

ENV ESTAFETTE_CI_SERVER="estafette" \
    ESTAFETTE_WORKDIR="C:/estafette-work" \
    ESTAFETTE_LOG_FORMAT="v3"

USER ContainerAdministrator

WORKDIR ${ESTAFETTE_WORKDIR}

ENTRYPOINT ["C:/estafette-ci-builder.exe"]